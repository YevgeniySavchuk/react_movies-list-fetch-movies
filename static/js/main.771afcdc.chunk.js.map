{"version":3,"sources":["components/FindMovie/FindMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","App.tsx","index.tsx"],"names":["Error","MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","BASE_URL","getMovie","query","a","fetch","request","ok","status","json","FindMovie","isMovieInTheList","addMovie","useState","setQuery","setMovie","noError","errorMessage","setErrorMessage","findMovie","useCallback","trim","length","emptyQueryError","Response","noSuchMovieError","addMovieToTheList","repeatedMovieError","noMovieError","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","onClick","App","setMovies","some","el","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.771afcdc.chunk.js","sourcesContent":["import React, { ChangeEvent, useCallback, useState } from 'react';\nimport { getMovie } from '../../api';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\n\nenum Error {\n  noError = '',\n  noSuchMovieError = 'Can\\t find a movie with such title',\n  noMovieError = 'Select a movie first',\n  emptyQueryError = 'Enter search text',\n  repeatedMovieError = 'This movie already is in the list',\n}\n\ninterface Props {\n  isMovieInTheList: (movie: Movie) => boolean;\n  addMovie: (movie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = ({ isMovieInTheList, addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [errorMessage, setErrorMessage] = useState<Error>(Error.noError);\n\n  const findMovie = useCallback(async () => {\n    if (!query.trim().length) {\n      setErrorMessage(Error.emptyQueryError);\n    } else {\n      setErrorMessage(Error.noError);\n      const request = await getMovie(query);\n\n      if (request.Response === 'True') {\n        setMovie(request);\n        setErrorMessage(Error.noError);\n      } else {\n        setErrorMessage(Error.noSuchMovieError);\n      }\n    }\n  }, [errorMessage, query]);\n\n  const addMovieToTheList = useCallback(() => {\n    if (movie) {\n      if (isMovieInTheList(movie)) {\n        setErrorMessage(Error.repeatedMovieError);\n      } else {\n        addMovie(movie);\n        setQuery('');\n        setMovie(null);\n      }\n    } else {\n      setErrorMessage(Error.noMovieError);\n    }\n  }, [movie]);\n\n  const inputHandler = ({ target }: ChangeEvent<HTMLInputElement>) => {\n    setQuery(target.value);\n    setErrorMessage(Error.noError);\n    setMovie(null);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={(event) => event.preventDefault()}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={`input ${errorMessage.length && 'is-danger'}`}\n              value={query}\n              onChange={inputHandler}\n            />\n          </div>\n\n          <p className=\"help is-danger\">\n            {errorMessage}\n          </p>\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              data-cy=\"find\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              data-cy=\"add\"\n              onClick={addMovieToTheList}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {movie && <MovieCard movie={movie} />}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\" data-cy=\"card-image\">\n\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movie-title\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const apiKey = '795f52a1';\n\nconst BASE_URL = `https://www.omdbapi.com/?apikey=${apiKey}&t=`;\n\nexport const getMovie = async (query: string) => {\n  const request = await fetch(`${BASE_URL}${query}`);\n\n  if (!request.ok) {\n    throw new Error(`Status of error: ${request.status}`);\n  }\n\n  return request.json();\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const isMovieInTheList = useCallback((movie: Movie) => {\n    return movies.some(el => el.imdbID === movie.imdbID);\n  }, [movies]);\n\n  const addMovie = useCallback((movie: Movie) => {\n    setMovies([...movies, movie]);\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          isMovieInTheList={isMovieInTheList}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}